@startuml
title PS60's class diagram

namespace it.polimi.ingsw.ps60{
    namespace clientSide{
        namespace view{
            namespace client{
                class it.polimi.ingsw.ps60.clientSide.view.client.ClientParser {
                    ~ in_obj : ObjectInputStream
                    ~ input : InputStream
                    ~ out_obj : ObjectOutputStream
                    ~ output : OutputStream
                    ~pr : PrintWriter
                    - messagesFromServer : List<String>
                    - socket : Socket
                    + ClientParser (sock : Socket, messages : List<String>, viewMethodSelection : ViewMethodSelection)
                    + run () : void
                    + alert (alert : String) : void
                    + building () : void
                    + disconnection (s : String) : void
                    + divinityChoice () : void
                    + divinitySelection () : void
                    + movement () : void
                    + nickname_birthday () : void
                    + number_of_players () : void
                    + printBoard (board : String) : void
                    + receiveCards () : GlobalVariables.DivinityCard[]
                    + receiveInt () : int
                    + receiveList () : List<SerializedInteger>
                    + receiveListArray () : List<SerializedInteger>[]
                    + receiveWorkers () : SerializedInteger[]
                    + sendCards (cards : GlobalVariables.DivinityCard[]) : void
                    + sendInt (send : int) : void
                    + sendPositions (positions : SerializedInteger[]) : void
                    + sendString (toServer : String) : void
                    + setWorkers () : void
                    + socketClose () : void
                    + specialChoice (s : String) : void
                    + status (s : String) : void
                }

                class it.polimi.ingsw.ps60.clientSide.view.client.ClientReader {
                    ~ br : BufferedReader
                    ~ serverSays : String
                    ~ socket : Socket
                    - messagesFromServer : List<String>
                    + ClientReader ()
                    + run () : void
                }

                class it.polimi.ingsw.ps60.clientSide.view.client.ClientStarter {
                    - ipAddress : String
                    - messagesFromServer : List<String>
                    - pool : ExecutorService
                    - port : int
                    - socket : Socket
                    + ClientStarter ()
                    + start () : void
                }
            }
            namespace cliGuiMethods{
                namespace swing{
                    class it.polimi.ingsw.ps60.clientSide.view.cliGuiMethods.swing.MainFrame {
                        ~ divinityCard : JPanel
                        ~ grid : JPanel
                        ~ info : JPanel
                        ~ opponents : JPanel
                        ~ workers : JPanel
                        - jButtons : JButton[]
                        - screenSize : Dimension
                        + MainFrame ()
                        + getButton (i : int) : JButton
                        + getButtonCoords (jButton : JButton) : int[]
                        + getScreenSize () : Dimension
                        + imageFileReader (pathToImage : image) : BufferedImage
                        + resetButtons () : void
                        + setDivinityCardImage (divinityCards : int[], turnNumber : int) : void
                    }
                }

                class it.polimi.ingsw.ps60.clientSide.view.cliGuiMethods.CLIMethods {
                    - divinityCards : int[]
                    - turnNumber : int
                    + CLIMethods ()
                    + alert (string : String) : void
                    + buildChoice (moves : List<int[]>) : int
                    + cardChoices (playerNumber : int) : GlobalVariables.DivinityCard[]
                    + divinitySelection (cards : GlobalVariables.DivinityCard[]) : GlobalVariables.DivinityCard
                    + firstSetWorkers (impossiblePositions : List<int[]>) : int[][]
                    + ipPortChoices () : String[]
                    + moveChoice (moves : List<int[]>[], positionWorkers : int[][]) : int
                    + nicknameBirthdayChoice () : String[]
                    + numberOfPlayers () : int
                    + printBoard (board : String) : void
                    + printPossibleBuilds (moves : List<int[]>) : int
                    + printPossibleMoves (moves : List<int[]>[], positionWorkers : int[][]) : int
                    + specialChoices (string : String) : boolean
                    + status (divinityCards : int[], turnNumber : int) : void
                }

                class it.polimi.ingsw.ps60.clientSide.view.cliGuiMethods.GUIMethods {
                    + GUIMethods ()
                    + alert (string : String) : void
                    + buildChoice (moves : List<int[]>) : int
                    + cardChoices (playerNumber : int) : GlobalVariables.DivinityCard[]
                    + divinitySelection (cards : GlobalVariables.DivinityCard[]) : GlobalVariables.DivinityCard
                    + firstSetWorkers (impossiblePositions : List<int[]>) : int[][]
                    + ipPortChoices () : String[]
                    + moveChoice (moves : List<int[]>[], positionWorkers : int[][]) : int
                    + nicknameBirthdayChoice () : String[]
                    + numberOfPlayers () : int
                    + printBoard (board : String) : void
                    + specialChoices (string : String) : boolean
                    + status (divinityCards : int[], turnNumber : int) : void
                    - confirmOrRetry () : boolean
                }

                interface it.polimi.ingsw.ps60.clientSide.view.cliGuiMethods.ViewMethodSelection {
                    {abstract} + alert ()
                    {abstract} + buildChoice ()
                    {abstract} + cardChoices ()
                    {abstract} + divinitySelection ()
                    {abstract} + firstSetWorkers ()
                    {abstract} + ipPortChoices ()
                    {abstract} + moveChoice ()
                    {abstract} + nicknameBirthdayChoice ()
                    {abstract} + numberOfPlayers ()
                    {abstract} + printBoard ()
                    {abstract} + specialChoices ()
                    {abstract} + status ()
                }
            }
        }
    }
    namespace serverSide{
        namespace controller{
            namespace turn{
                namespace turnController{
                    class it.polimi.ingsw.ps60.serverSide.controller.turn.turnController.AtlasHephaestusTurnController {
                        + buildingSection () : void
                    }

                    class it.polimi.ingsw.ps60.serverSide.controller.turn.turnController.BaseTurnController {
                        ~ lost : boolean
                        + buildingSection () : void
                        + endTurnSection () : void
                        + movementSection () : void
                        + sendBoardToClient () : void
                        + turn () : void
                    }

                    class it.polimi.ingsw.ps60.serverSide.controller.turn.turnController.DemeterTurnController {
                        + buildingSection () : void
                    }

                    class it.polimi.ingsw.ps60.serverSide.controller.turn.turnController.HestiaTurnController {
                        + buildingSection () : void
                    }

                    class it.polimi.ingsw.ps60.serverSide.controller.turn.turnController.PoseidonTurnController {
                        + specialChoice () : void
                        + turn () : void
                    }

                    class it.polimi.ingsw.ps60.serverSide.controller.turn.turnController.PrometheusTurnController {
                        + movementSection () : void
                    }

                    interface it.polimi.ingsw.ps60.serverSide.controller.turn.turnController.TurnController {
                        {abstract} + turn ()
                    }
                }
                namespace turnEffects{
                    class it.polimi.ingsw.ps60.serverSide.controller.turn.turnEffects.ApolloTurnEffect {
                        + move () : void
                    }

                    class it.polimi.ingsw.ps60.serverSide.controller.turn.turnEffects.AthenaTurnEffect {
                        + move () : void
                    }

                    class it.polimi.ingsw.ps60.serverSide.controller.turn.turnEffects.AtlasTurnEffect {
                        + build () : void
                    }

                    class it.polimi.ingsw.ps60.serverSide.controller.turn.turnEffects.BaseTurnEffect {
                        + build () : void
                        + endTurn () : void
                        + move () : void
                        + winConditions () : void
                    }

                    class it.polimi.ingsw.ps60.serverSide.controller.turn.turnEffects.ChronusTurnEffect {
                        + winConditions () : void
                    }

                    class it.polimi.ingsw.ps60.serverSide.controller.turn.turnEffects.HephaestusTurnEffect {
                        + build () : void : void
                    }

                    class it.polimi.ingsw.ps60.serverSide.controller.turn.turnEffects.MinotaurTurnEffect {
                        + move () : void
                    }

                    class it.polimi.ingsw.ps60.serverSide.controller.turn.turnEffects.PanTurnEffect {
                        + winConditions () : void
                    }

                    interface it.polimi.ingsw.ps60.serverSide.controller.turn.turnEffects.TurnEffect {
                        {abstract} + build ()
                        {abstract} + endTurn ()
                        {abstract} + move ()
                    }
                }

                namespace turnStrategy{
                    class it.polimi.ingsw.ps60.serverSide.controller.turn.turnStrategy.ApolloTurnStrategy {
                        + baseMovement () : List<int[]>[]
                    }

                    class it.polimi.ingsw.ps60.serverSide.controller.turn.turnStrategy.ArtemisTurnStrategy {
                        + baseMovement () : List<int[]>
                    }

                    class it.polimi.ingsw.ps60.serverSide.controller.turn.turnStrategy.AtlasTurnStrategy {
                        + baseBuilding () : List<int[]>
                    }

                    class it.polimi.ingsw.ps60.serverSide.controller.turn.turnStrategy.BaseTurnStrategy {
                        + baseBuilding () : List<int[]>
                        + baseMovement () : List<int[]>[]
                        + isNotDisturbedByDivinity (workerPositions : int[], targetPosition[]) : boolean
                    }

                    class it.polimi.ingsw.ps60.serverSide.controller.turn.turnStrategy.HephaestusTurnStrategy {
                        + baseBuilding () : List<int[]>
                    }

                    class it.polimi.ingsw.ps60.serverSide.controller.turn.turnStrategy.MinotaurTurnStrategy {
                        + baseMovement () : List<int[]>[]
                    }

                    class it.polimi.ingsw.ps60.serverSide.controller.turn.turnStrategy.PrometheusTurnStrategy {
                        + baseMovement () : List<int[]>[]
                    }

                    class it.polimi.ingsw.ps60.serverSide.controller.turn.turnStrategy.TritonTurnStrategy {
                        + baseMovement () : List<int[]>[]
                    }

                    interface it.polimi.ingsw.ps60.serverSide.controller.turn.turnStrategy.TurnStrategy {
                        {abstract} + baseBuilding ()
                        {abstract} + baseMovement ()
                    }

                    class it.polimi.ingsw.ps60.serverSide.controller.turn.turnStrategy.ZeusTurnStrategy {
                        + baseBuilding () : List<int[]>
                    }
                }

                class it.polimi.ingsw.ps60.serverSide.controller.turn.DivinityStrategy {
                    - bitException : boolean
                    - specialChoice : String
                    + DivinityStrategy (divinityCard : GlobalVariables.DivinityCard)
                    + getSpecialChoice () : String
                    + getTurnController () : TurnController
                    + getTurnStrategyBuilding () : List<int[]>
                    + getTurnStrategyMovement () : List<int[]>[]
                    + isBitException () : boolean
                    + setBitException (bitException : boolean) : void
                    + setBuilding (building : int[]) : void
                    + setEndTurn () : void
                    + setMovement (movement : int[][]) : void
                }
            }
            class it.polimi.ingsw.ps60.serverSide.controller.ServerStarter {
                - nicknames : String[]
                + ServerStarter () : void
                + start () : void
                - divinityNumber () : int[]
                - gameTurn () : void
                - loadGame () : void
                - portSelection () : int
                - selectDivinityCard () : void
                - selectWorkersPositions () : void
                - serverThreadBound () : void
                - sort () : void
            }
        }

        namespace model{
            class it.polimi.ingsw.ps60.serverSide.model.Board {
                - cellMatrix : Cell[][]
                - cellToSend : char[]
                - completeTower : int
                - playerInGame : CircularListIterator<Player>
                - playerList : CircularLinkedList<Player>
                - playerMatrix : Player[]
                - playersNumber : int
                + Board (nicknames : String[]) : void
                + changeTurn () : void
                + getCellByPosition (position : int[]) : Cell
                + getCellToSend () : char[]
                + getCompleteTower () : int
                + getPlayerInGame () : CircularListIterator<Player>
                + getPlayerMatrix () : Player[]
                + getPlayerWinner () : Player
                + getPlayersNumber () : int
                + increaseCompleteTower () : void
                + isNotWon () : boolean
                + lose (player : Player) : void
                + win (player : Player) : void
            }

            class it.polimi.ingsw.ps60.serverSide.model.Cell {
                - buildingLevel : int
                - dome : boolean
                - position : int[]
                + Cell (position : int[], board : Board)
                + buildDome () : void
                + getBuildingLevel () : int
                + getPosition () : int[]
                + getWorkerIn () : boolean
                + incrementBuildingLevel () : void
                + isDomed () : boolean
                + isFree () : boolean
                + setWorkerIn (workerIn : Worker) : void
                - updateCellToSend () : void
            }

            class it.polimi.ingsw.ps60.serverSide.model.Player {
                - buildByWorker : boolean
                - divinityCard : int
                - nickname : String
                - workers : Worker[]
                + Player (nickName : String)
                + getDivinityCard () : GlobalVariables.DivinityCard
                + getDivinityStrategy () : DivinityStrategy
                + getNickname () : String
                + getServerThread () : ServerThread
                + getWorker (workerNumber : int) : Worker
                + getWorkerMoved () : Worker
                + getWorkers () : Workers[]
                + isBuildByWorker () : boolean
                + setBuildByWorker (i : boolean) : void
                + setDivinityCard (divinityCard : GlobalVariables.DivinityCard) : void
                + setServerThread (serverThread : ServerThread) : void
                + setWorkerMoved (workerMoved : Worker) : void
            }

            class it.polimi.ingsw.ps60.serverSide.model.Worker {
                + Worker (owner : Player)
                + getCellPosition () : Cell
                + getOldCell () : Cell
                + getOwner () : Player
                + isLeveledUp () : boolean
                + moveWorker (cellNewPosition : Cell) : void
                + setOldCell (oldCell : Cell) : void
            }
        }

        namespace server{
            class it.polimi.ingsw.ps60.serverSide.server.Server {
                - clientList : ArrayList<ServerThread>
                - nickBirth : List<String[]>
                - numberOfPlayers : int
                - port : int
                - serverSocket : ServerSocket
                - socket : Socket
                + Server (port : int)
                + getNicknameAndBirthday () : String[][]
                + getSocketList () : ArrayList<ServerThread>
                + nameProblem (current : String) : boolean
                - acceptClientConnection () : void
                - serverStart () : void
            }

            class it.polimi.ingsw.ps60.serverSide.server.ServerThread {
                # socket : Socket
                - buffer : BufferedReader
                - in : InputStream
                - in_obj : ObjectInputStream
                - out : OutputStream
                - out_obj : ObjectOutputStream
                - playerBound : String
                - serverThreads : List<ServerThread>
                - writer : PrintWriter
                + ServerThread (soc : Socket, serverThreads : ArrayList<ServerThread>)
                + buildMessage (possible_choice : List<int[]>) : int
                + disconnection () : void
                + divinityChoice () : GlobalVariables.DivinityCard[]
                + divinitySelection (GlobalVariables.DivinityCard[]) : GlobalVariables.DivinityCard
                + getPlayerBound () : String
                + getServerThreads () : List<ServerThreads>
                + lossMessage (message : String) : void
                + moveMessage (possible_choice : List<int[]>, positionWorkers : int[][]) : void
                + nicknameBirthday () : String[]
                + numberOfPlayers () : int
                + receiveCards () : GlobalVariables.DivinityCard[]
                + receiveInteger () : int
                + receivePositions () : List<SerializedInteger[]>
                + receiveString () : String
                + sendAlert (string : String) : void
                + sendBoard (board : char[]) : void
                + sendCards (cards : GlobalVariables.DivinityCard[]) : void
                + sendInt (send : ind) : void
                + sendPositionWorkers (positionWorkers : SerializedInteger[]) : void
                + sendPositionsArray (list : List<SerializedInteger>) : void
                + sendPositionsList (list : List<SerializedInteger>[]) : void
                + sendStatus (divinityCard : int[], turnNumber : int) : void
                + sendString (message : String) : void
                + setPlayerBound (nickName : String) : void
                + setWorkers (takenPositions : List<int[]>) : int[][]
                + specialChoice (message : String) : int
                + win () : void
            }
        }
    }
    namespace utils{
        namespace circularList{
            class it.polimi.ingsw.ps60.utils.circularList.CircularLinkedList {
                - head : Node<T>
                - size : int
                - tail : Node<T>
                + CircularLinkedList ()
                + addNode (value : T) : void
                + getHead () : Node<T>
                + getSize () : int
                + removeNode () : void
            }

            class it.polimi.ingsw.ps60.utils.circularList.CircularListIterator {
                - list : CircularLinkedList<T>
                - node : Node<T>
                + CircularListIterator (list : CircularLinkedList<T>)
                + get () : T
                + getList () : CircularLinkedList<T>
                + nextNode () : void
            }

            class it.polimi.ingsw.ps60.utils.circularList.Node {
                ~ nextNode : Node<T>
                + Node (value : T)
                + getValue () : T
            }
        }

        class it.polimi.ingsw.ps60.utils.Converters {
            + deserialize2DArrayOfInts (serializedInteger : SerializedInteger[]) : int[][]
            + deserializeArrayOfListOfInts (arrayOfListToDeserialize : List<SerializedInteger>[]) : List<int[]>[]
            + deserializeListOfInts (listToDeserialize : List<SerializedInteger>) : List<int[]>
            + serialize2DArrayOfInt (ints : Int[][]) : SerializedInteger[]
            + serializeArrayOfListOfInts (arrayOfListToSerialize : List<int[]>[]) : List<SerializedInteger>[]
            + serializeListOfInts (listToSerialize : List<int[]>) : List<SerializedInteger>
        }

        class it.polimi.ingsw.ps60.utils.FileAccess {
            - inputStream : FileInputStream
            - objectInputStream : ObjectInputStream
            - objectOutputStream : ObjectOutputStream
            - outputStream : FileOutputStream
            + reader () : Board
            + writer (board : Board) : void
        }

        class it.polimi.ingsw.ps60.utils.FlushedInput {
            ~ input : Scanner
            + nextInt (upperLimit : int, lowerLimit : int) : int
            + nextLine () : String
            - flushInput () : void
        }

        class it.polimi.ingsw.ps60.utils.ListContains {
            - list : List<int[]>
            + ListContains (list : List<int[]>)
            + isContained (nodeToCheck : int[]) : boolean
        }

        class it.polimi.ingsw.ps60.utils.SerializedInteger {
            + serialized : int[]
            + SerializedInteger (vector : int[]) : SerializedInteger
        }

        class it.polimi.ingsw.ps60.utils.StringRegexValidation {
            - regex : Pattern
            + StringRegexValidation (pattern : String)
            + isValid (stringToCheck : String) : boolean
        }
    }
    class it.polimi.ingsw.ps60.GlobalVariables{
        {static} + game : Board
        {static} + input : FlushedInput
    }

    enum it.polimi.ingsw.ps60.GlobalVariables.Colour{
        BLUE
        GREEN
        RED
        RESET
        YELLOW
        - colour : Colour
        - string : String
        + getColor () : Colour
        + getString () : String
    }

    enum it.polimi.ingsw.ps60.GlobalVariables.DivinityCard {
        APOLLO
        ARTEMIS
        ATHENA
        ATLAS
        CHRONUS
        DEMETER
        HEPHAESTUS
        HESTIA
        MINOTAUR
        NONE
        PAN
        POSEIDON
        PROMETHEUS
        TRITON
        ZEUS
        - sourcePosition : String
        + getSourcePosition : String
    }

    enum it.polimi.ingsw.ps60.GlobalVariables.IdPlayer{
        PLAYER1
        PLAYER2
        PLAYER3
        - colour : Colour
        - sourcePawn : String
    }

    enum it.polimi.ingsw.ps60.GlobalVariables.StringPatterns{
        IPV4
        PortNumber
        Nickname
        NumberOfPlayer
        DivinityCard
        Boolean1True0False
        Date
        - pattern : String
        + getPattern () : String
    }

    class it.polimi.ingsw.ps60.Launcher{
        {static} + main ()
        {static} - firstSelections ()
        {static} - clientSelection ()
    }

    it.polimi.ingsw.ps60.utils.SerializedInteger .up.|> java.io.Serializable
    it.polimi.ingsw.ps60.serverSide.server.ServerThread o-- it.polimi.ingsw.ps60.utils.Converters : converters
    it.polimi.ingsw.ps60.serverSide.model.Board .up.|> java.io.Serializable
    it.polimi.ingsw.ps60.serverSide.model.Board o-- it.polimi.ingsw.ps60.serverSide.model.Player : playerWinner
    it.polimi.ingsw.ps60.serverSide.model.Cell .up.|> java.io.Serializable
    it.polimi.ingsw.ps60.serverSide.model.Cell o-- it.polimi.ingsw.ps60.serverSide.model.Board : board
    it.polimi.ingsw.ps60.serverSide.model.Cell o-- it.polimi.ingsw.ps60.serverSide.model.Worker : workerIn
    it.polimi.ingsw.ps60.serverSide.model.Player .up.|> java.io.Serializable
    it.polimi.ingsw.ps60.serverSide.model.Player o-- it.polimi.ingsw.ps60.serverSide.server.ServerThread : serverThread
    it.polimi.ingsw.ps60.serverSide.model.Player o-- it.polimi.ingsw.ps60.serverSide.model.Worker : workerMoved
    it.polimi.ingsw.ps60.serverSide.model.Worker .up.|> java.io.Serializable
    it.polimi.ingsw.ps60.serverSide.model.Worker o-- it.polimi.ingsw.ps60.serverSide.model.Cell : OldCell
    it.polimi.ingsw.ps60.serverSide.model.Worker o-- it.polimi.ingsw.ps60.serverSide.model.Cell : cellPosition
    it.polimi.ingsw.ps60.serverSide.model.Worker o-- it.polimi.ingsw.ps60.serverSide.model.Player : owner
    it.polimi.ingsw.ps60.serverSide.controller.turn.turnStrategy.ApolloTurnStrategy -up-|> it.polimi.ingsw.ps60.serverSide.controller.turn.turnStrategy.BaseTurnStrategy
    it.polimi.ingsw.ps60.serverSide.controller.turn.turnStrategy.ArtemisTurnStrategy -up-|> it.polimi.ingsw.ps60.serverSide.controller.turn.turnStrategy.BaseTurnStrategy
    it.polimi.ingsw.ps60.serverSide.controller.turn.turnStrategy.AtlasTurnStrategy -up-|> it.polimi.ingsw.ps60.serverSide.controller.turn.turnStrategy.BaseTurnStrategy
    it.polimi.ingsw.ps60.serverSide.controller.turn.turnStrategy.BaseTurnStrategy .up.|> it.polimi.ingsw.ps60.serverSide.controller.turn.turnStrategy.TurnStrategy
    it.polimi.ingsw.ps60.serverSide.controller.turn.turnStrategy.HephaestusTurnStrategy -up-|> it.polimi.ingsw.ps60.serverSide.controller.turn.turnStrategy.BaseTurnStrategy
    it.polimi.ingsw.ps60.serverSide.controller.turn.turnStrategy.MinotaurTurnStrategy -up-|> it.polimi.ingsw.ps60.serverSide.controller.turn.turnStrategy.BaseTurnStrategy
    it.polimi.ingsw.ps60.serverSide.controller.turn.turnStrategy.PrometheusTurnStrategy -up-|> it.polimi.ingsw.ps60.serverSide.controller.turn.turnStrategy.BaseTurnStrategy
    it.polimi.ingsw.ps60.serverSide.controller.turn.turnStrategy.TritonTurnStrategy -up-|> it.polimi.ingsw.ps60.serverSide.controller.turn.turnStrategy.BaseTurnStrategy
    it.polimi.ingsw.ps60.serverSide.controller.turn.turnStrategy.ZeusTurnStrategy -up-|> it.polimi.ingsw.ps60.serverSide.controller.turn.turnStrategy.BaseTurnStrategy
    it.polimi.ingsw.ps60.serverSide.controller.turn.turnEffects.ApolloTurnEffect -up-|> it.polimi.ingsw.ps60.serverSide.controller.turn.turnEffects.BaseTurnEffect
    it.polimi.ingsw.ps60.serverSide.controller.turn.turnEffects.AthenaTurnEffect -up-|> it.polimi.ingsw.ps60.serverSide.controller.turn.turnEffects.BaseTurnEffect
    it.polimi.ingsw.ps60.serverSide.controller.turn.turnEffects.AtlasTurnEffect -up-|> it.polimi.ingsw.ps60.serverSide.controller.turn.turnEffects.BaseTurnEffect
    it.polimi.ingsw.ps60.serverSide.controller.turn.turnEffects.BaseTurnEffect .up.|> it.polimi.ingsw.ps60.serverSide.controller.turn.turnEffects.TurnEffect
    it.polimi.ingsw.ps60.serverSide.controller.turn.turnEffects.ChronusTurnEffect -up-|> it.polimi.ingsw.ps60.serverSide.controller.turn.turnEffects.BaseTurnEffect
    it.polimi.ingsw.ps60.serverSide.controller.turn.turnEffects.HephaestusTurnEffect -up-|> it.polimi.ingsw.ps60.serverSide.controller.turn.turnEffects.BaseTurnEffect
    it.polimi.ingsw.ps60.serverSide.controller.turn.turnEffects.MinotaurTurnEffect -up-|> it.polimi.ingsw.ps60.serverSide.controller.turn.turnEffects.BaseTurnEffect
    it.polimi.ingsw.ps60.serverSide.controller.turn.turnEffects.PanTurnEffect -up-|> it.polimi.ingsw.ps60.serverSide.controller.turn.turnEffects.BaseTurnEffect
    it.polimi.ingsw.ps60.serverSide.controller.turn.turnController.AtlasHephaestusTurnController -up-|> it.polimi.ingsw.ps60.serverSide.controller.turn.turnController.BaseTurnController
    it.polimi.ingsw.ps60.serverSide.controller.turn.turnController.BaseTurnController .up.|> it.polimi.ingsw.ps60.serverSide.controller.turn.turnController.TurnController
    it.polimi.ingsw.ps60.serverSide.controller.turn.turnController.BaseTurnController o-- it.polimi.ingsw.ps60.serverSide.model.Player : player
    it.polimi.ingsw.ps60.serverSide.controller.turn.turnController.DemeterTurnController -up-|> it.polimi.ingsw.ps60.serverSide.controller.turn.turnController.BaseTurnController
    it.polimi.ingsw.ps60.serverSide.controller.turn.turnController.HestiaTurnController -up-|> it.polimi.ingsw.ps60.serverSide.controller.turn.turnController.BaseTurnController
    it.polimi.ingsw.ps60.serverSide.controller.turn.turnController.PoseidonTurnController -up-|> it.polimi.ingsw.ps60.serverSide.controller.turn.turnController.BaseTurnController
    it.polimi.ingsw.ps60.serverSide.controller.turn.turnController.PrometheusTurnController -up-|> it.polimi.ingsw.ps60.serverSide.controller.turn.turnController.BaseTurnController
    it.polimi.ingsw.ps60.serverSide.controller.turn.DivinityStrategy o-- it.polimi.ingsw.ps60.serverSide.controller.turn.turnController.TurnController : turnController
    it.polimi.ingsw.ps60.serverSide.controller.turn.DivinityStrategy o-- it.polimi.ingsw.ps60.serverSide.controller.turn.turnEffects.TurnEffect : turnEffect
    it.polimi.ingsw.ps60.serverSide.controller.turn.DivinityStrategy o-- it.polimi.ingsw.ps60.serverSide.controller.turn.turnStrategy.TurnStrategy : turnStrategy
    it.polimi.ingsw.ps60.serverSide.controller.ServerStarter o-- it.polimi.ingsw.ps60.utils.FileAccess : fileAccess
    it.polimi.ingsw.ps60.serverSide.controller.ServerStarter o-- it.polimi.ingsw.ps60.serverSide.server.Server : server
    it.polimi.ingsw.ps60.clientSide.view.cliGuiMethods.CLIMethods .up.|> it.polimi.ingsw.ps60.clientSide.view.cliGuiMethods.ViewMethodSelection
    it.polimi.ingsw.ps60.clientSide.view.cliGuiMethods.GUIMethods .up.|> it.polimi.ingsw.ps60.clientSide.view.cliGuiMethods.ViewMethodSelection
    it.polimi.ingsw.ps60.clientSide.view.cliGuiMethods.GUIMethods o-- it.polimi.ingsw.ps60.clientSide.view.cliGuiMethods.swing.MainFrame : santorini
    it.polimi.ingsw.ps60.clientSide.view.client.ClientParser .up.|> java.lang.Runnable
    it.polimi.ingsw.ps60.clientSide.view.client.ClientParser o-- it.polimi.ingsw.ps60.clientSide.view.cliGuiMethods.ViewMethodSelection : methodSelection
    it.polimi.ingsw.ps60.clientSide.view.client.ClientParser o-- it.polimi.ingsw.ps60.utils.Converters : converters
    it.polimi.ingsw.ps60.clientSide.view.client.ClientReader .up.|> java.lang.Runnable
    it.polimi.ingsw.ps60.clientSide.view.client.ClientReader o-- it.polimi.ingsw.ps60.clientSide.view.cliGuiMethods.ViewMethodSelection : methodSelection
    it.polimi.ingsw.ps60.clientSide.view.client.ClientStarter o-- it.polimi.ingsw.ps60.clientSide.view.cliGuiMethods.ViewMethodSelection : viewMethodSelection
    it.polimi.ingsw.ps60.GlobalVariables +-down- it.polimi.ingsw.ps60.GlobalVariables.Colour
    it.polimi.ingsw.ps60.GlobalVariables +-down- it.polimi.ingsw.ps60.GlobalVariables.DivinityCard
    it.polimi.ingsw.ps60.GlobalVariables +-down- it.polimi.ingsw.ps60.GlobalVariables.IdPlayer
    it.polimi.ingsw.ps60.GlobalVariables +-down- it.polimi.ingsw.ps60.GlobalVariables.StringPatterns
    it.polimi.ingsw.ps60.GlobalVariables.DivinityCard .up.|> java.io.Serializable
    it.polimi.ingsw.ps60.GlobalVariables.IdPlayer o-- it.polimi.ingsw.ps60.GlobalVariables.Colour : colour
    it.polimi.ingsw.ps60.clientSide.view.cliGuiMethods.swing.MainFrame -up-|> javax.swing.JPanel
    it.polimi.ingsw.ps60.utils.circularList.CircularLinkedList .up.|> java.io.Serializable
    it.polimi.ingsw.ps60.utils.circularList.CircularListIterator .up.|> java.io.Serializable
    it.polimi.ingsw.ps60.utils.circularList.Node .up.|> java.io.Serializable
    it.polimi.ingsw.ps60.utils.circularList.Node o-- T : value

}
@enduml